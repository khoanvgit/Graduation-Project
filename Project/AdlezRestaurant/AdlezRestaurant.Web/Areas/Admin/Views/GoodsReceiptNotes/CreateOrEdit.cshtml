@using AdlezRestaurant.Web.Areas.Admin.ViewModels
@model ReceiptNote

@{
    ViewData["Title"] = "CreateOrEdit";
    ViewBag.IngredientList = @Model.Ingredients.ToList();
    int dem = 0;
    if (ViewBag.mode == "edit")
    {
        dem = ViewBag.ExcludedIngredients.Count + 1;
    }
}

    <script>
        var d = 1;
        var objs = [];
        var mode = '@ViewBag.mode';

        var excludedIngredientNames = [];
        var excludedIngredientCalUnits = [];
        var excludedIngredientUPrices = [];
        var excludedIngrIds = [];

        var ingredientNames = [];
        var ingredientCalUnits = [];
        var ingredientUPrices = [];
        var ingrIds = [];

        if (mode == ('create'))
        {
            d = 1;
        }
        else if (mode == 'edit')
        {
            d = @dem;

            ingredientNames.push('@ViewBag.ExcludedIngredients[ViewBag.ExcludedIngredients.Count-1].Name');
            ingredientCalUnits.push('@ViewBag.ExcludedIngredients[ViewBag.ExcludedIngredients.Count-1].CalculationUnit');
            ingredientUPrices.push('@ViewBag.ExcludedIngredients[ViewBag.ExcludedIngredients.Count-1].EstimatedPrice');
            ingrIds.push('@ViewBag.ExcludedIngredients[ViewBag.ExcludedIngredients.Count-1].IngredientId');

            @for (int x = 0; x < (@dem - 2); x++)
            {
                @: excludedIngredientNames.push('@ViewBag.ExcludedIngredients[x].Name');
                @: excludedIngredientCalUnits.push('@ViewBag.ExcludedIngredients[x].CalculationUnit');
                @: excludedIngredientUPrices.push('@ViewBag.ExcludedIngredients[x].EstimatedPrice');
                @: excludedIngrIds.push('@ViewBag.ExcludedIngredients[x].IngredientId');
            }
            for (var i = 0; i < (d-2); i++)
            {
                var obj = {
                    name: excludedIngredientNames[i],
                    cu: excludedIngredientCalUnits[i],
                    up: excludedIngredientUPrices[i],
                    id: excludedIngrIds[i],
                };
                objs.push(obj);
            }
            
        }

        @for (var i = 0; i < ViewBag.IngredientList.Count; i++)
        {
            @: ingredientNames.push('@ViewBag.IngredientList[i].Name');
            @: ingredientCalUnits.push('@ViewBag.IngredientList[i].CalculationUnit');
            @: ingredientUPrices.push('@ViewBag.IngredientList[i].EstimatedPrice');
            @: ingrIds.push('@ViewBag.IngredientList[i].IngredientId');
        }

            function autocomplete(inp, arr, arr1, arr2, arr3) {
              /*the autocomplete function takes two arguments,
              the text field element and an array of possible autocompleted values:*/
              var currentFocus;
              /*execute a function when someone writes in the text field:*/
              if(inp){
                  inp.addEventListener("input", function(e) {
                  var a, b, i, val = this.value;
                  /*close any already open lists of autocompleted values*/
                  closeAllLists();
                  if (!val) { return false;}
                  currentFocus = -1;
                  /*create a DIV element that will contain the items (values):*/
                  a = document.createElement("DIV");
                  a.setAttribute("id", this.id + "autocomplete-list");
                  a.setAttribute("class", "autocomplete-items");
                  /*append the DIV element as a child of the autocomplete container:*/
                  this.parentNode.appendChild(a);
                  /*for each item in the array...*/
                  for (i = 0; i < arr.length; i++) {
                    /*check if the item starts with the same letters as the text field value:*/
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                      /*create a DIV element for each matching element:*/
                      b = document.createElement("DIV");
                      /*make the matching*/
                      b.innerHTML = "<strong class='form-control' style='cursor: pointer;'>" + arr[i] + "</strong>" ;
                      //b.innerHTML += arr[i].substr(val.length);
                      /*insert a input field that will hold the current array item's value:*/
                      b.innerHTML += "<input id='getID"+i+"' type='hidden' value='" + arr[i] + "'>";

                      /*execute a function when someone clicks on the item value (DIV element):*/
                          b.addEventListener("click", function(e) {
                          /*insert the value for the autocomplete text field:*/
                          inp.value = this.getElementsByTagName("input")[0].value;
                          var j = this.getElementsByTagName("input")[0].getAttribute("id").replace("getID","");
                          inp.setAttribute("value", this.getElementsByTagName("input")[0].value);
                          var nextInp1 = inp.parentElement.parentElement.nextSibling.nextSibling;
                          nextInp1.childNodes[1].setAttribute("value", arr1[j]);
                          var nextInp2 = nextInp1.nextSibling.nextSibling;
                          nextInp2.childNodes[1].setAttribute("value", arr2[j]);
                          document.getElementById("addIngr"+(d-1)).setAttribute("value", arr3[j]);
                          inp.onchange();
                          /*close the list of autocompleted values,
                          (or any other open lists of autocompleted values:*/
                          closeAllLists();
                      });
                      a.appendChild(b);
                    }
                  }
              });
              inp.addEventListener("keydown", function(e) {
                  var x = document.getElementById(this.id + "autocomplete-list");
                  if (x) x = x.getElementsByTagName("div");
                  if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the currentFocus variable:*/
                    currentFocus++;
                    /*and and make the current item more visible:*/
                    addActive(x);
                  } else if (e.keyCode == 38) { //up
                    /*If the arrow UP key is pressed,
                    decrease the currentFocus variable:*/
                    currentFocus--;
                    /*and and make the current item more visible:*/
                    addActive(x);
                  } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (currentFocus > -1) {
                      /*and simulate a click on the "active" item:*/
                      if (x) x[currentFocus].click();
                    }
                  }
              });
              }
              /*execute a function presses a key on the keyboard:*/

              function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[currentFocus].classList.add("autocomplete-active");
              }
              function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                  x[i].classList.remove("autocomplete-active");
                }
              }
              function closeAllLists(elmnt) {
                /*close all autocomplete lists in the document,
                except the one passed as an argument:*/
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                  if (elmnt != x[i] && elmnt != inp) {
                  x[i].parentNode.removeChild(x[i]);
                }
              }
            }
            /*execute a function when someone clicks in the document:*/
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
            }

    </script>

    <h1>Create/Edit</h1>

    <hr />
    <div class="container">
        <div class="col-md-12">
            <div class="form-group text-center">
                <h4>Goods Receipt Note</h4>
            </div>
            <form autocomplete="off" asp-action="CreateOrEdit">
                <div class="border border-primary border-bottom-0 p-4">
                    <div class="row">
                        <div class="col-md-6">
                            <label name="StockInId" class="control-label">GRN #</label>: @Model.StockInId
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label name="StaffName" class="control-label">Staff's name</label>: @Model.StaffName
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label name="CreatedDate" class="control-label">CreatedDate</label>: @Model.CreatedDate.ToString("dd/MM/yyyy")
                            </div>
                        </div>
                    </div>
                </div>

                <div class="border border-primary mb-2 p-2" style="min-height: 300px;">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>No. </th>
                                <th>Name</th>
                                <th>Cal. unit</th>
                                <th>Unit price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="addRow">
                            @for (int i = 0; i < Model.GoodsReceiptNotes.Count; i++)
                            {
                                var addIngr = $"addIngr{i + 1}";
                                var myInput = $"myInput{i + 1}";
                                var ingrQuan = $"ingrQuan{i + 1}";
                                var btnDelGood = $"btnDelGood{i + 1}";
                                <tr>
                                    <td width="5%">
                                        <span class="totalRow">@(i+1)</span>
                                        <input id="@addIngr" name="@addIngr" hidden value="@Model.GoodsReceiptNotes[i].IngredientId">
                                    </td>
                                    <td width="40%">
                                        <div class="autocomplete" style="width:300px;">
                                            @if (i == Model.GoodsReceiptNotes.Count - 1)
                                            {
                                                <input id="@myInput" type="text" class="form-control" onchange="updateThings(this)" value="@Model.GoodsReceiptNotes[i].Ingredient.Name" />
                                            }
                                            else
                                            {
                                                <input id="@myInput" type="text" class="form-control" onchange="updateThings(this)" value="@Model.GoodsReceiptNotes[i].Ingredient.Name" readonly />
                                            }
                                        </div>
                                    </td>
                                    <td width="10%">
                                        <input type="text" class="form-control" readonly value="@Model.GoodsReceiptNotes[i].Ingredient.CalculationUnit" />
                                    </td>
                                    <td width="15%">
                                        <input type="text" class="form-control" min="0" readonly value="@Model.GoodsReceiptNotes[i].GoodsUnitPrice" />
                                    </td>
                                    <td width="10%">
                                        <input id="@ingrQuan" name="@ingrQuan" type="number" class="form-control" min="1" onchange="countTotal(this)" value="@Model.GoodsReceiptNotes[i].GoodsNumber" />
                                    </td>
                                    <td width="20%">
                                        @{
                                            var tol = Convert.ToDecimal(Model.GoodsReceiptNotes[i].GoodsUnitPrice) * Convert.ToDecimal(Model.GoodsReceiptNotes[i].GoodsNumber);
                                        }
                                        <input type="number" class="form-control getTotalM" min="0" readonly value="@tol" />
                                    </td>
                                    <td>
                                        @if (i == Model.GoodsReceiptNotes.Count - 1)
                                        {
                                            <button id="@btnDelGood" type="button" class="btn btn-danger" onclick="delGood(this)"><i class="far fa-times-circle"></i></button>
                                        }
                                        else
                                        {
                                            <button id="@btnDelGood" type="button" class="btn btn-danger" onclick="delGood(this)" style="visibility: hidden;"><i class="far fa-times-circle"></i></button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div>
                        <button type="button" class="btn btn-success" onclick="newGood(this)"><i class="fas fa-plus-square"></i> Add</button>
                    </div>
                    <hr />
                    <table>
                        <tr>
                            <td width="5%">
                                <input id="totalRow" name="totalRow" hidden value="1" />
                            </td>
                            <td width="40%"></td>
                            <td width="10%"></td>
                            <td width="15%"></td>
                            <td width="10%">Total money: </td>
                            <td width="20%">
                            @if(ViewBag.mode == "create")
                            {
                                <span>$</span><span id="totalM">--</span>
                            }
                            else
                            {
                                <span id="totalM">$ @Model.TotalMoney.ToString("N2")</span>
                            }
                        </td>
                            <td>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="form-group d-flex justify-content-between">
                    <a asp-action="Index" class="btn btn-secondary"><i class="fas fa-angle-left"></i> Back</a>
                    @if (ViewBag.mode == "edit")
                    {
                        <input type="submit" value="Update request" asp-route-id="@Model.StockInId" class="btn btn-warning" />
                    }
                    else
                    {
                        <input type="submit" value="Create request" class="btn btn-primary" />
                    }
                </div>
                <div class="row float-right">
                    <div class="text-danger">@TempData["errMsg"]</div>
                </div>
            </form>
        </div>
    </div>

    @section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
<script>
    if(mode == 'edit'){
            autocomplete(document.getElementById("myInput"+(d-1)), ingredientNames, ingredientCalUnits, ingredientUPrices, ingrIds);
        }
    function toggleBtnDel(con){
            if(d != 1){
                if(con == 1){
                    document.getElementById("btnDelGood"+(d-1)).style.visibility = "hidden";
                }
                else{
                    document.getElementById("btnDelGood"+(d-1)).style.visibility = "visible";
                }
            }
        }
    function newGood(button) {
        if(d != 1){
            if(!ingredientNames.includes(document.getElementById("myInput"+(d-1)).value)){
                alert("Wrong name of ingredient, try again!");
                document.getElementById("myInput"+(d-1)).focus();
                return;
            }
            if(document.getElementById("ingrQuan"+(d-1)).value == null || document.getElementById("ingrQuan"+(d-1)).value == ""){
                alert("Quantity is not valid number !");
                document.getElementById("ingrQuan"+(d-1)).focus();
                return;
            }
        }
        var tr = document.createElement('tr');
        document.getElementById("addRow").appendChild(tr);
        toggleBtnDel(1);
        if(d != 1){
            for (i = 0; i < ingredientNames.length; i++) {
                if(ingredientNames[i] == document.getElementById("myInput"+(d-1)).value){
                    var obj = {
                        id: ingrIds[i],
                        name: ingredientNames[i],
                        cu: ingredientCalUnits[i],
                        up: ingredientUPrices[i]
                    }
                    objs.push(obj);
                    var index = ingredientNames.indexOf(ingredientNames[i]);
                    ingrIds.splice(index, 1);
                    ingredientNames.splice(index, 1);
                    ingredientCalUnits.splice(index, 1);
                    ingredientUPrices.splice(index, 1);
                    break;
                }
            }

            document.getElementById("myInput"+(d-1)).readOnly = true;
        }
        tr.innerHTML = `
                            <td width="5%"><span class="totalRow">${d}</span>
                                <input id="addIngr${d}" name="addIngr${d}" hidden>
                            </td>
                            <td width="40%">
                                <div class="autocomplete" style="width:300px;">
                                    <input id="myInput${d}" type="text" class="form-control" onchange="updateThings(this)"/>
                                </div>
                            </td>
                            <td width="10%">
                                <input type="text" class="form-control" readonly/>
                            </td>
                            <td width="15%">
                                <input type="text" class="form-control" min="0" readonly/>
                            </td>
                            <td width="10%">
                                <input id="ingrQuan${d}" name="ingrQuan${d}" type="number" class="form-control" min="1" onchange="countTotal(this)"/>
                            </td>
                            <td width="20%">
                                <input type="number" class="form-control getTotalM" min="0" readonly/>
                            </td>
                            <td>
                                <button id="btnDelGood${d}" type="button" class="btn btn-danger" onclick="delGood(this)"><i class="far fa-times-circle"></i></button>
                            </td>
                            `;
                            setTimeout(function(){
                                d++;
                            }, 100);
            document.getElementById("totalRow").setAttribute("value", d);
            autocomplete(document.getElementById("myInput"+d), ingredientNames, ingredientCalUnits, ingredientUPrices, ingrIds);
        }

        function delGood(button){
            if(confirm("Do you want to remove this item?")){
                button.parentElement.parentElement.remove();
                d--;
                toggleBtnDel(0);
                if(d > 1){
                    document.getElementById("myInput"+(d-1)).removeAttribute("readonly");
                    var obj = objs[objs.length-1];
                    objs.pop();
                    ingrIds.push(obj.id);
                    ingredientNames.push(obj.name);
                    ingredientCalUnits.push(obj.cu);
                    ingredientUPrices.push(obj.up);
                }
                totalMoney();
            }
        }

        function updateThings(inp){
            var j = ingredientNames.indexOf(inp.value);
            var nextInp1 = inp.parentElement.parentElement.nextSibling.nextSibling;
            nextInp1.childNodes[1].setAttribute("value", ingredientCalUnits[j]);
            var nextInp2 = nextInp1.nextSibling.nextSibling;
            nextInp2.childNodes[1].setAttribute("value", ingredientUPrices[j]);
            document.getElementById("addIngr"+(d-1)).setAttribute("value", ingrIds[j]);
            document.getElementById("ingrQuan"+(d-1)).onchange();
        }

        function countTotal(btn){
            if(btn.value < 1){
                btn.value = 1;
            }
            var previousInp = btn.parentElement.previousSibling.previousSibling.childNodes[1];
            var total = btn.parentElement.nextSibling.nextSibling.childNodes[1];
            btn.value = parseInt(btn.value);
            total.setAttribute("value", (parseFloat(previousInp.value) * parseInt(btn.value)).toFixed(2));
            totalMoney();
        }

        function totalMoney(){
            var total = 0;
            for(var i=0;i< document.getElementsByClassName("getTotalM").length; i++){
                total += parseFloat(document.getElementsByClassName("getTotalM")[i].value);
            }
            document.getElementById("totalM").innerText = total.toFixed(2);
        }

</script>
}
